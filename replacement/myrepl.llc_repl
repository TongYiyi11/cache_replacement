#include "cache.h"
#include <cstdlib>
#include <ctime>

#define maxRRPV 3
#define SHCT_SIZE  16384
#define SHCT_PRIME 16381
#define SAMPLER_SET (256*NUM_CPUS)
#define SAMPLER_WAY LLC_WAY
#define SHCT_MAX 7
#define DIVISION 2          // division between protected and probationary segment
#define EPSILON 0.03125f    // BIP parameter: 1/32 probability

uint32_t rrpv[LLC_SET][LLC_WAY];
int bound;                  // boundary between protected and probationary segment

// sampler structure
class SAMPLER_class
{
public:
    uint8_t valid,
            type,
            used;

    uint64_t tag, cl_addr, pc;

    uint32_t lru;

    SAMPLER_class() {
        valid = 0;
        type = 0;
        used = 0;

        tag = 0;
        cl_addr = 0;
        pc = 0;

        lru = 0;
    };
};

// sampler
uint32_t rand_sets[SAMPLER_SET];
SAMPLER_class sampler[SAMPLER_SET][SAMPLER_WAY];

// prediction table structure
class SHCT_class {
public:
    uint32_t counter;

    SHCT_class() {
        counter = 4;
    };
};
SHCT_class SHCT[NUM_CPUS][SHCT_SIZE];

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    cout << "Initialize SHIP state" << endl;

    bound = (int)SAMPLER_WAY / (int)DIVISION;

    for (int i=0; i<LLC_SET; i++) {
        for (int j=0; j<LLC_WAY; j++) {
            rrpv[i][j] = maxRRPV;
        }
    }

    // initialize sampler
    for (int i=0; i<SAMPLER_SET; i++) {
        for (int j=0; j<SAMPLER_WAY; j++) {
            sampler[i][j].lru = j;
        }
    }

    // randomly selected sampler sets
    srand(time(NULL));
    unsigned long rand_seed = 1;
    unsigned long max_rand = 1048576;
    uint32_t my_set = LLC_SET;
    int do_again = 0;
    for (int i=0; i<SAMPLER_SET; i++)
    {
        do
        {
            do_again = 0;
            rand_seed = rand_seed * 1103515245 + 12345;
            rand_sets[i] = ((unsigned) ((rand_seed/65536) % max_rand)) % my_set;
            //printf("Assign rand_sets[%d]: %u  LLC: %u\n", i, rand_sets[i], my_set);
            for (int j=0; j<i; j++)
            {
                if (rand_sets[i] == rand_sets[j])
                {
                    do_again = 1;
                    break;
                }
            }
        } while (do_again);
        //printf("rand_sets[%d]: %d\n", i, rand_sets[i]);
    }
}

// check if this set is sampled
uint32_t is_it_sampled(uint32_t set)
{
    for (int i=0; i<SAMPLER_SET; i++)
        if (rand_sets[i] == set)
            return i;

    return SAMPLER_SET;
}

// update sampler
void update_sampler(uint32_t cpu, uint32_t s_idx, uint64_t address, uint64_t pc, uint8_t type)
{
    // Sampler uses Seg_LRU with BIP replacement

    SAMPLER_class *s_set = sampler[s_idx];
    uint64_t tag = address / (64*LLC_SET);
    int match = -1;
    uint32_t org_position = -1;

    // check hit
    for (match=0; match<SAMPLER_WAY; match++)
    {
        if (s_set[match].valid && (s_set[match].tag == tag))
        {
            uint32_t SHCT_idx = s_set[match].pc % SHCT_PRIME;
            if (SHCT[cpu][SHCT_idx].counter > 0)
                SHCT[cpu][SHCT_idx].counter--;

            s_set[match].type = type;
            s_set[match].used = 1;
            // promotion
            org_position = s_set[match].lru;
            float r = rand() / (float)RAND_MAX;
            if(r < EPSILON){
                s_set[match].lru = 0;
            }else{
                s_set[match].lru = bound;
            }

            break;
        }
    }

    // check invalid
    if (match == SAMPLER_WAY)
    {
        for (match=0; match<SAMPLER_WAY; match++)
        {
            if (s_set[match].valid == 0)
            {
                s_set[match].valid = 1;
                s_set[match].tag = tag;
                s_set[match].pc = pc;
                s_set[match].type = type;
                s_set[match].used = 0;
                // insertion
                org_position = s_set[match].lru;
                s_set[match].lru = bound + 1;
                break;
            }
        }
    }

    // miss
    if (match == SAMPLER_WAY)
    {
        for (match=0; match<SAMPLER_WAY; match++)
        {
            // eviction
            if (s_set[match].lru == (SAMPLER_WAY-1))
            {
                if (s_set[match].used == 0)
                {
                    uint32_t SHCT_idx = s_set[match].pc % SHCT_PRIME;
                    if (SHCT[cpu][SHCT_idx].counter < SHCT_MAX)
                        SHCT[cpu][SHCT_idx].counter++;
                }

                s_set[match].tag = tag;
                s_set[match].pc = pc;
                s_set[match].type = type;
                s_set[match].used = 0;
                // insertion
                org_position = s_set[match].lru;
                s_set[match].lru = bound + 1;
                break;
            }
        }
    }

    // aging
    for (int i=0; i<SAMPLER_WAY; i++)
    {
        if (s_set[i].lru < org_position)
            s_set[i].lru++;
    }
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t pc, uint64_t full_addr, uint32_t type)
{
    // look for the maxRRPV line
    while (1)
    {
        for (int i=0; i<LLC_WAY; i++)
            if (rrpv[set][i] == maxRRPV)
                return i;

        for (int i=0; i<LLC_WAY; i++)
            rrpv[set][i]++;
    }

    // WE SHOULD NOT REACH HERE
    assert(0);
    return 0;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t pc, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && pc)
        assert(0);

    //cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    //cout << hex << " paddr: " << setw(12) << full_addr << " pc: " << setw(8) << pc << " victim_addr: " << victim_addr << dec << endl;

    // handle writeback access
    if (type == WRITEBACK) {
        if (hit)
            return;
        else {
            rrpv[set][way] = maxRRPV-1;
            return;
        }
    }

    // update sampler
    uint32_t s_idx = is_it_sampled(set);
    if (s_idx < SAMPLER_SET)
        update_sampler(cpu, s_idx, full_addr, pc, type);

    if (hit)
        // promotion
        rrpv[set][way] = 0;
    else {
        // SHIP prediction
        uint32_t SHCT_idx = pc % SHCT_PRIME;

        // sanity check
        if (SHCT_idx >= SHCT_PRIME)
            assert(0);

        // insertion
        if(SHCT[cpu][SHCT_idx].counter < 2){
            rrpv[set][way] = 0;
        }else if(SHCT[cpu][SHCT_idx].counter >= 2 && SHCT[cpu][SHCT_idx].counter < 4){
            rrpv[set][way] = 1;
        }else if(SHCT[cpu][SHCT_idx].counter >= 4 && SHCT[cpu][SHCT_idx].counter < 6){
            rrpv[set][way] = 2;
        }else{
            rrpv[set][way] = maxRRPV;
        }

    }
}

// use this function to print out your own stats at the end of simulation
void CACHE::llc_replacement_final_stats()
{

}
